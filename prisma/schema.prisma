// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  questions     Question[]
  rounds        Round[]
}

model Round {
  id        Int                 @id @default(autoincrement())
  userId    String
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions QuestionsInRounds[]
  source    String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  public    Boolean             @default(true)
}

model Question {
  id             Int                 @id @default(autoincrement())
  category       String
  tossUpFormat   String
  tossUpQuestion String
  tossUpAnswer   String
  bonusFormat    String
  bonusQuestion  String
  bonusAnswer    String
  source         String
  userId         String
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  rounds         QuestionsInRounds[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  public         Boolean             @default(true)
}

model QuestionsInRounds {
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int // relation scalar field (used in the `@relation` attribute above)
  round      Round    @relation(fields: [roundId], references: [id])
  roundId    Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  //assignedBy String

  @@id([questionId, roundId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
